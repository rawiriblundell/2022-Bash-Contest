#!/usr/bin/env bash

#------------------------------------------------------------------------------
# Path         - /usr/bin/tbpm
# GitHub       - https://github.com/The-Repo-Club/
# Author       - The-Repo-Club [wayne6324@gmail.com]
# Start On     - Sun 12 Dec 13:39:12 GMT 2021
# Modified On  - Sun 12 Dec 13:39:12 GMT 2021
#------------------------------------------------------------------------------

# More about colors at Arch Wiki
# https://wiki.archlinux.org/index.php/Color_Bash_Prompt
#
# Don't use double quotes here!
# Text attributes
declare -r txtClean=$'\e[0m'      # All attributes off
declare -r txtBold=$'\e[1m'       # Or bright, depend on your terminal
declare -r txtUScore=$'\e[4m'     # Underscore
declare -r txtHide=$'\e[8m'       # Concealed, very useful here...

# Foreground colors only. Someone may miss backgroud colors.
declare -r colBlack=$'\e[30m'
declare -r colRed=$'\e[31m'
declare -r colGreen=$'\e[32m'
declare -r colYello=$'\e[33m'
declare -r colBlue=$'\e[34m'
declare -r colMagenta=$'\e[35m'
declare -r colArchBlue=$'\e[36m'  # Well, someone may call it Cyan
declare -r colWhite=$'\e[37m'

## Script metadata
SCRIPTNAME=${0##*/}
VERSION="2021.12.12"
DESCRIPTION="Terminal Based Password Manager"
AUTHOR="The-Repo-Club <wayne6324@gmail.com>"
COLORDESCRIPTION="${colBlue}T${txtClean}erminal ${colBlue}B${txtClean}ased ${colBlue}P${txtClean}assword ${colBlue}M${txtClean}anager"
GPG_OPTS="--quiet --batch --use-agent"

readonly SCRIPTNAME DESCRIPTION COLORDESCRIPTION VERSION AUTHOR

if [[ -z "$TBPM" ]]; then
    passDir=$HOME/.tbpm
else
    passDir=$TBPM
fi

#=== FUNCTION =================================================================
#        Name: msg
# Description: Print message with a green pretag if $quiet is not set.
# Parameter 1: Message to print.
#==============================================================================

# copied from makepkg and modified
msg () {

    local mesg=$1; shift
    printf "${colGreen}==>${txtClean}${txtBold} %s${txtClean}\n" "$mesg" "$@"
    exit 0
}

#=== FUNCTION =================================================================
#        Name: error
# Description: Print message with a red pretag an ERROR.
# Parameter 1: Message to print.
#==============================================================================

# copied from makepkg
error() {

    local mesg=$1; shift
    printf "${colRed}==> ERROR:${txtClean}${txtBold} %s${txtClean}\n" "$mesg" "$@" >&2
    exit 1

}

#=== FUNCTION =================================================================
#        Name: yesno
# Description: Print message with a yes or no responce.
# Parameter 1: Message to print.
#==============================================================================

yesno() {

	[[ -t 0 ]] || return 0
	local response
	read -r -p "$1 [y/N] " response
	[[ $response == [yY] ]] || exit 1

}

#=== FUNCTION =================================================================
#        Name: initialize
# Description: Initialize the password manager.
# Parameter 1: GPG key.
#==============================================================================

initialize() {
    local gpg_key=

    if [[ ! -d $passDir ]]; then
        mkdir -p $passDir
    fi

    if [[ $# -lt 2 ]]; then
        error "Not enough parameters supplied"
    elif [[ $# -gt 2 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    local key=$1
    while read -r gpg_id; do
        if [[ "$gpg_id" == "$key" ]]; then
            gpg_key=$gpg_id
        fi
    done <<< $( gpg --list-keys )

    if [ -z $gpg_key ]; then
        error "valid GPG does not exist!"
    else
        echo $gpg_key > $passDir/.gpg_key
        msg "GPG '${gpg_key}' has been saved to ${passDir}/.gpg_key"
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: write
# Description: Write a password to the password manager.
# Parameter 1: the file name without .gpg.
# Parameter 2: the password for ther file.
#==============================================================================

write() {
    if [[ $# -lt 3 ]]; then
        error "Not enough parameters supplied"
    elif [[ $# -gt 3 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    local passfile=$1
    local password=$2
    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"

    if [[ -f "${passDir}/${passfile}.gpg" ]]; then
        if [[ -f $passDir/.gpg_key ]]; then
            error "That password file already exists."
        else
            error "valid GPG does not exist!"
        fi
    else
        if [[ -f $passDir/.gpg_key ]]; then
            gpg_key=$(cat $passDir/.gpg_key)
            echo -e "${password}" > /tmp/${passfile_temp}
            gpg ${GPG_OPTS} --output ${passDir}/${passfile}.gpg --encrypt --recipient ${gpg_key} /tmp/${passfile_temp}
            rm -f /tmp/${passfile_temp}
            msg "Password '${password}' has been saved to ${passDir}/${passfile}.gpg"
        else
            error "valid GPG does not exist!"
        fi
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: print
# Description: Print a password from the password manager.
# Parameter 1: the file name without .gpg.
#==============================================================================

print() {
    case $3 in
		-c|--copy)
            shift
            copy $@
            ;;
	esac

    if [[ $# -lt 2 ]]; then
        error "Not enough parameters supplied."
    elif [[ $# -gt 2 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    local passfile=${1%%-*}
    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"

    if [[ -f "${passDir}/${passfile}.gpg" ]]; then
        if [[ -f $passDir/.gpg_key ]]; then
            gpg ${GPG_OPTS} --output /tmp/${passfile_temp} --decrypt ${passDir}/${passfile}.gpg
            password=$(cat /tmp/${passfile_temp})
            printf "%s: %s\n" "${passfile}" "${password}"
        else
            error "valid GPG does not exist!"
        fi
    else
        if [[ -f $passDir/.gpg_key ]]; then
            error "That password file does not exists."
        else
            error "valid GPG does not exist!"
        fi
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: copy
# Description: Copy a command from the print options.
# Parameter 1: the file name without .gpg.
#==============================================================================

copy() {
    if [[ $# -lt 2 ]]; then
        error "Not enough parameters supplied."
    elif [[ $# -gt 2 ]]; then
        error "Too many parameters supplied."
    fi

    local passfile=${1%%-*}
    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"

    if [[ -f "${passDir}/${passfile}.gpg" ]]; then
        if [[ -f $passDir/.gpg_key ]]; then
            gpg ${GPG_OPTS} --output /tmp/${passfile_temp} --decrypt ${passDir}/${passfile}.gpg
            password=$(cat /tmp/${passfile_temp})
            if command -v clipmenu-ctl &> /dev/null; then
                clipmenu-ctl disable
                if [ $(clipmenu-ctl status) == "disabled" ]; then
                    printf "%s\n" "${password%%$'\n'*}" | xclip -selection clipboard
                fi
                clipmenu-ctl enable
            else
                printf "%s\n" "${password%%$'\n'*}" | xclip -selection clipboard
            fi
        else
            error "valid GPG does not exist!"
        fi
    else
        if [[ -f $passDir/.gpg_key ]]; then
            error "That password file does not exists."
        else
            error "valid GPG does not exist!"
        fi
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: list
# Description: List the passwords from the password manager.
#==============================================================================

list() {
    if [[ $# -lt 1 ]]; then
        error "Not enough parameters supplied."
    elif [[ $# -gt 1 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    if [[ -f $passDir/.gpg_key ]]; then
        printf "%s\n" "${COLORDESCRIPTION}"
        while read -r; do
            if [[ ! "$REPLY" == "$passDir" ]]; then
                echo ${REPLY::-4}
            fi
        done <<< $( tree -N -l --noreport --prune --matchdirs --ignore-case "$passDir" )
    else
        error "valid GPG does not exist!"
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: edit
# Description: Edit a password from the password manager.
#==============================================================================

edit() {
    if [[ $# -lt 2 ]]; then
        error "Not enough parameters supplied."
    elif [[ $# -gt 2 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    local passfile=$1
    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"

    if [[ -f "${passDir}/${passfile}.gpg" ]]; then
        if [[ -f $passDir/.gpg_key ]]; then
            gpg ${GPG_OPTS} --output /tmp/${passfile_temp} --decrypt ${passDir}/${passfile}.gpg
            ${VISUAL:-vim} "/tmp/$passfile_temp"
            password=$(cat /tmp/${passfile_temp})
	        [[ -f "/tmp/$passfile_temp" ]] || error "New password not saved."
            gpg -d -o - ${GPG_OPTS} "${passDir}/${passfile}.gpg" 2>/dev/null | diff - "/tmp/$passfile_temp" &>/dev/null && error "Password unchanged."
            gpg_key=$(cat $passDir/.gpg_key)
            while ! gpg --yes ${GPG_OPTS} --output ${passDir}/${passfile}.gpg --encrypt --recipient ${gpg_key} /tmp/${passfile_temp}; do
                yesno "GPG encryption failed. Would you like to try again?"
            done
            rm -f /tmp/${passfile_temp}
            msg "${VISUAL:-vim}: Password '${password%%$'\n'*}' has been saved to ${passDir}/${passfile}.gpg"
        else
            error "valid GPG does not exist!"
        fi
    else
        if [[ -f $passDir/.gpg_key ]]; then
            error "That password file does not exists."
        else
            error "valid GPG does not exist!"
        fi
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: generate
# Description: Generate a password to the password manager.
# Parameter 1: the file name without .gpg.
# Parameter 2: password leanth.
#==============================================================================

generate() {
    if [[ $# -lt 3 ]]; then
        error "Not enough parameters supplied"
    elif [[ $# -gt 3 ]]; then
        error "Too many parameters supplied."
    else
        shift
    fi

    local passfile=$1
    local length=$2
    [[ $length =~ ^[0-9]+$ ]] || error "password length \"$length\" must be a number."
	[[ $length -gt 0 ]] || error "password length must be greater than zero."
    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"

    if [[ -f "${passDir}/${passfile}.gpg" ]]; then
        if [[ -f $passDir/.gpg_key ]]; then
            error "That password file already exists."
        else
            error "valid GPG does not exist!"
        fi
    else
        if [[ -f $passDir/.gpg_key ]]; then
            gpg_key=$(cat $passDir/.gpg_key)
            read -r -n $length password < <(LC_ALL=C tr -dc "[:punct:][:alnum:]" < /dev/urandom)
            [[ ${#password} -eq $length ]] || error "Could not generate password from /dev/urandom."

            echo -e "${password}" > /tmp/${passfile_temp}
            gpg ${GPG_OPTS} --output ${passDir}/${passfile}.gpg --encrypt --recipient ${gpg_key} /tmp/${passfile_temp}
            rm -f /tmp/${passfile_temp}
            msg "Password '${password}' has been saved to ${passDir}/${passfile}.gpg"
        else
            error "valid GPG does not exist!"
        fi
    fi
    exit
}

#=== FUNCTION =================================================================
#        Name: usage
# Description: Prints the usage.
#==============================================================================

usage() {
    printf "
    %s - v%s

    Usage:
      %s <password>...
      %s [options] [<password>]...

    Options:
        -h, --help                  Display help.
        -w, --write                 Wite a password to the database.
        -g, --generate              Generate a password.
        -e, --edit                  Edit a password.
        -d, --delete                Delete a password.
        -p, --print                 Print saved password data to the terminal.
        -l, --list                  List the saved password in a tree format.
        -b, --backup                Backup passwords to a tar file.
        -r, --restore               Restore password from a tar file.
        -v, --version               Print version information and exits.

    --print Options:
        -c, --copy                  Copy a printed password using xclip.
    \n" "$COLORDESCRIPTION" "$VERSION" "$SCRIPTNAME" "$SCRIPTNAME"
      exit
}

#=== FUNCTION =================================================================
#        Name: version
# Description: Prints version information.
#==============================================================================

version() {
    printf "
     _________   ______    ______    ____    ____
    |  _   _  | |_   _ \  |_   __ \ |_   \  /   _|
    |_/ | | \_|   | |_) |   | |__) |  |   \/   |
        | |       |  __'.   |  ___/   | |\  /| |
       _| |_     _| |__) | _| |_     _| |_\/_| |_
      |_____|   |_______/ |_____|   |_____||_____|

    %s - v%s

    This program may be freely redistributed under
    the terms of the GNU General Public License v3.0.

    %s
    \n" "$COLORDESCRIPTION" "$VERSION" "$AUTHOR"
    exit
}

if [[ -z $@ ]]; then
    usage
fi

while [ "$1" ]; do
    case $1 in
        -i|--init)
            initialize $@
            shift;;
        -w|--write)
            write $@
            shift;;
        -p|--print)
            print $@
            shift;;
        -e|--edit)
            edit $@
            shift;;
        -l|--list)
            list $@
            shift;;
        -g|--generate)
            generate $@
            shift;;
        -h|--help|-\?)
            usage
            shift;;
        -v|--version)
            version
            shift;;
        -*)
            error "Unknown option: $1"
            usage
            ;;
        *)
            usage
            ;;
    esac
done
